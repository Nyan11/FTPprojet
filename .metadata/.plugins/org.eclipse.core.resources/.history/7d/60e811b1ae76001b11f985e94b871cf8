/*
 * TP JAVA RIP
 * Min Client FTP
 * */
package cda.projet.client;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.Scanner;

public class Main {

	static Socket socket;
	static BufferedReader br;
	static PrintStream ps;
	static Scanner sc;
	
	public static void main(String[] args) throws Exception {
		System.out.println("Le Client FTP");

		socket = new Socket("localhost", 2121);

		br = new BufferedReader(new InputStreamReader(socket.getInputStream()));
		ps = new PrintStream(socket.getOutputStream());

		sc = new Scanner(System.in);

		String send = "";
		String recv = "";

		recvMessage(recv);
		while(true) {
			send = sc.nextLine();
			if(send.equals("bye")) {
				break;
			}
			else if(send.startsWith("get ")) {
				ps.println(send);
				recvMessage(recv);
				getCommande(recv, send);
				
			}
			else if(send.startsWith("stor ")) {
				ps.println(send);
				recvMessage(recv);
			}
			else if(send.startsWith("user ") || send.startsWith("pass ") || send.equals("ls") || send.equals("pwd") || send.startsWith("cd ")){
				ps.println(send);
				recvMessage(recv);
			}
			else {
				System.out.println("Commande inconnue");
			}
		}
		ps.println("bye");	
		socket.close();
		sc.close();
	}
	
	public static void recvMessage(String value) throws IOException {
		do {
			value = br.readLine();
			System.out.println(">> " + value);
		} while(value.charAt(0) == '1');
	}
	
	public static void getCommande(String recv, String send) throws UnknownHostException, IOException {
		if(recv.charAt(0) == '0') {
			int port = Integer.parseInt(recv.split(" ")[4]);
			byte[] aByte = new byte[1];
			int bytesRead;
			
			Socket getSocket = new Socket("localhost", port);
			InputStream is = getSocket.getInputStream();
			
			ByteArrayOutputStream baos = new ByteArrayOutputStream();
			
			FileOutputStream fos = new FileOutputStream(send.split(" ")[1]);
			BufferedOutputStream bos = new BufferedOutputStream(fos);
			
			bytesRead = is.read(aByte, 0, aByte.length);

            do {
                    baos.write(aByte);
                    bytesRead = is.read(aByte);
            } while (bytesRead != -1);

            bos.write(baos.toByteArray());
            bos.flush();
            bos.close();
            getSocket.close();
		}
	}
}
